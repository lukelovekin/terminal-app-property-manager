This criterion is linked to a Learning OutcomeCMP1041-3.1: **Designs** a software development plan which states the purpose of the application and provides a list of functions/features that will be implemented in the application.

6.0 to >5.0 pts
HD
Software development plan states the purpose of the application *with a very high level of clarity*, providing a *comprehensive* list of functions / features that will be implemented in the application.

=================

This criterion is linked to a Learning OutcomeCMP1041-2.1: **Plans** user interactions with the application.

6.0 to >5.0 pts
HD
Outline of user interaction and experience for the application *comprehensively* outlines with a *very high level of detail* how the user will find out how to interact with / use each feature; how the user will interact with / use each feature; and how errors will be handled by the application and displayed to the user.

==================

CMP1041-2.2, CMP1041-2.3: **Creates** an application which handles errors.

12.0 to >10.5 pts
HD
Application handles *all categories* of errors *gracefully*.

===================

CMP1041-3.2: **Designs** diagrams which explain the control flow in their application.

6.0 to >5.0 pts
HD
Diagram *comprehensively* shows the control flow of the application for *all* features of the application, and utilises a recognised format or set of conventions for a control flow diagram.

==================

This criterion is linked to a Learning OutcomeCMP1041-3.3: **Outlines** how the functions/features described in the software development plan will be implemented.

6.0 to >5.0 pts
HD
Implementation plan *very clearly* outlines how each feature will be implemented, providing a *comprehensive* checklist of tasks for each feature; prioritises implementation of different features and/or checklist items within a feature; provides a deadline for each feature, checklist, and/or checklist item.

================

CMP1041-1.1: **Utilises** variables and variable scope by declaring them correctly, assigning values to them, and utilising variable scope in block coding with control structures.

6.0 to >5.0 pts
HD
Uses variables by declaring and assigning values correctly and demonstrates *a deep and nuanced understanding* of scope by using variables correctly in block coding with control structures *which contain their own scoped variables and complex nested structures*.

==================

CMP1041-1.2: **Utilises** loops and conditional control structures by using them correctly to manage control flow of an application.


6.0 to >5.0 pts
HD
Uses loops and conditional control structures to implement a control flow which has multiple paths and *complex* nested structures that handle multiple contingencies that manage the control flow of the application *in a highly efficient manner*.

===========

PRG1002-5.1: **Utilises** a library by including an appropriate import statement in the code.

6.0 to >5.0 pts
HD
Correctly imports *four or more* Ruby Gems into the code

===========

PRG1002-5.2: **Utilises** functions from an imported library

6.0 to >5.0 pts
HD
Makes **extensive** use of functions from one or more Ruby Gems

===========

PRG1002-5.3: **Writes** simple functions and uses them in code

6.0 to >5.0 pts
HD
Writes *six or more* simple functions and uses *at least five* of these in code.

==========

PRG1002-3.1: **Utilises** standard input and output in a simple program

6.0 to >5.0 pts
HD
Uses input and output in *two or more sophisticated* ways in an application, demonstrating *deep and nuanced understanding* of input and output in Ruby.

============

This criterion is linked to a Learning OutcomePRG1002-3.2: **Utilises** command line arguments in a simple program


6.0 to >5.0 pts
HD
Uses *multiple* command line arguments and demonstrates *a deep and nuanced understanding*

===========

This criterion is linked to a Learning OutcomePRG1002-3.3: **Applies** DRY (Don't Repeat Yourself) coding principles to code

6.0 to >5.0 pts
HD
Applies DRY coding principles to *entire* codebase

==========

CMP1041-1.3: **Applies** established code style and conventions in the specified programming language consistently in all code produced.

6.0 to >5.0 pts
HD
Applies code style and convention consistently across *all code* produce with *no errors*.

=========

This criterion is linked to a Learning OutcomeCMP1041-4.3: **Creates** an application which runs and has features that are consistent with the development plan.

6.0 to >5.0 pts
HD
Application runs with *zero* errors and has features that are *completely consistent* with the development plan.

===========

CMP1041-4.2: **Designs** appropriate documentation or help file for a user to utilise the features of the application.

6.0 to >5.0 pts
HD
Help file includes *comprehensive* instructions which *accurately* describe: steps to install the application; dependencies required by the application; system/hardware requirements; features of the application.

============

CMP1041-4.1: **Designs** tests for main features of the application.

6.0 to >5.0 pts
HD
TWO tests both test *main features* of the application and are *highly relevant* to checking that the application is running as expected.

==========

This criterion is linked to a Learning OutcomeCMP1041-6.1: **Utilises** source control to version and trace the development of an application.

6.0 to >5.0 pts
HD
Utilises source control with *significantly more than 20* commits, *all* with meaningful commit messages and pushed to a remote repository.

==========

CMP1041-6.3: **Utilises** operating system or IDE features which facilitate the execution of the application.

6.0 to >5.0 pts
HD
Writes multiple highly sophisticated scripts which facilitate the execution of the application OR packaging the application as a Ruby gem. Script(s) or gem run with *zero* errors.

===========

PRG1002-4.4: **Demonstrates** algorithmic thinking applied to programming by explaining logic in a program

4.5 to >4.0 pts
HD
Provides a *very. thorough* walkthrough of the logic of the application, demonstrating *a very high level* of algorithmic thinking.
